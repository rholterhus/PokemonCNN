{"version":3,"sources":["mainComponent.js","upload.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","display","justifyContent","height","width","padding","middle","mainCircle","position","borderRadius","backgroundColor","centerLine","zIndex","topSemiCircle","transform","cursor","bottomSemiCircle","blackbar","Main","state","navigateToUpload","navigateToDraw","setHovered","e","target","style","setUnhovered","this","to","push","onMouseEnter","onMouseLeave","onClick","setState","React","Component","color","uploader","label","backgroundImage","backgroundSize","backgroundRepeat","left","top","Upload","imageUrl","model","prediction","handleUpload","event","console","log","files","length","url","URL","createObjectURL","img","Image","crossOrigin","src","onload","getPrediction","getModel","tf","newModel","testImage","fromPixels","resizeBilinear","predict","results","value","arraySync","map","i","htmlFor","id","type","accept","capture","onChange","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","App","useState","useRef","useReducer","appState","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+bAWIA,EAAS,CACTC,UAAW,CACPC,QAAS,OACTC,eAAgB,SAChBC,OAAQ,OACRC,MAAO,OACPC,QAAS,KAEbC,OAAQ,CACJF,MAAO,OACPD,OAAQ,MACRE,QAAS,IACTJ,QAAS,OACTC,eAAgB,UAEpBK,WAAY,CACRC,SAAU,WACVL,OAAQ,QACRC,MAAO,QACPK,aAAc,0BACdC,gBAAiB,SAErBC,WAAY,CACRH,SAAU,WACVL,OAAQ,MACRC,MAAO,OACPC,QAAS,IACTK,gBAAiB,QACjBE,OAAQ,MAEZC,cAAe,CACXL,SAAU,WACVM,UAAW,sBACXX,OAAQ,OACRC,MAAO,QACPK,aAAc,kBACdC,gBAAiB,QACjBK,OAAQ,WAEZC,iBAAkB,CACdR,SAAU,WACVM,UAAW,qBACXX,OAAQ,OACRC,MAAO,QACPK,aAAc,kBACdC,gBAAiB,QACjBK,OAAQ,WAEZE,SAAU,CACNT,SAAU,WACVE,gBAAiB,QACjBP,OAAQ,MACRC,MAAO,OACPC,QAAS,MA4DFa,E,2MApDXC,MAAQ,CACJC,kBAAkB,EAClBC,gBAAgB,G,EAGpBC,WAAa,SAACC,GACVA,EAAEC,OAAOC,MAAMf,gBAAkB,Q,EAGrCgB,aAAe,SAACH,GACZA,EAAEC,OAAOC,MAAMf,gBAAkB,S,wEAM3B,IAAD,OAEL,OAAIiB,KAAKR,MAAMC,iBACJ,kBAAC,IAAD,CAAUQ,GAAG,UAAUC,MAAM,IAGpCF,KAAKR,MAAME,eACJ,kBAAC,IAAD,CAAUO,GAAG,QAAQC,MAAM,IAIlC,yBAAKJ,MAAO1B,EAAOC,WACf,yBAAKyB,MAAO1B,EAAOO,QACf,yBAAKmB,MAAO1B,EAAOkB,WACnB,yBAAKQ,MAAO1B,EAAOQ,aACnB,yBAAKkB,MAAO1B,EAAOY,aACnB,yBAAKc,MAAO1B,EAAOc,cACdiB,aAAcH,KAAKL,WACnBS,aAAcJ,KAAKD,aACnBM,QAAS,kBAAM,EAAKC,SAAS,CAAEb,kBAAkB,MAHtD,gBAMA,yBAAKK,MAAO1B,EAAOiB,iBACfc,aAAcH,KAAKL,WACnBS,aAAcJ,KAAKD,aACnBM,QAAS,kBAAM,EAAKC,SAAS,CAAEZ,gBAAgB,MAHnD,mB,GAxCDa,IAAMC,W,gBCzDrBpC,EAAM,aACRC,UAAW,CACPG,OAAQ,OACRC,MAAO,OACPC,QAAS,IACTK,gBAAiB,QACjB0B,MAAO,SAEXC,SAAU,CACR3B,gBAAiB,OAEnB4B,MAAO,CACLC,gBAAiB,yFACjBC,eAAgB,QAChBC,iBAAkB,YAClBjC,SAAU,WACVkC,KAAM,MACNC,IAAK,QACLxC,OAAQ,QACRY,OAAQ,YAnBF,QAqBD,CACLyB,eAAgB,QAChBC,iBAAkB,YAClBjC,SAAU,WACVkC,KAAM,MACNC,IAAK,QACLxC,OAAQ,QACRY,OAAQ,YAmFG6B,E,2MA3EXzB,MAAQ,CACN0B,SAAU,kFACVC,MAAO,KACPC,WAAY,iB,EAadC,aAAe,SAACC,GACdC,QAAQC,IAAI,oBADY,IAEhBC,EAAUH,EAAMzB,OAAhB4B,MACOH,EAAMzB,OAAO4B,MAAM,GAClC,GAAIA,EAAMC,OAAS,EAAG,CACpB,IAAMC,EAAMC,IAAIC,gBAAgBP,EAAMzB,OAAO4B,MAAM,IACnD,EAAKnB,SAAS,CAACY,SAAUS,IACzBJ,QAAQC,IAAI,EAAKhC,OAEjB,IAAIsC,EAAM,IAAIC,MACdD,EAAIE,YAAc,YAClBF,EAAIG,IAAMN,EACVG,EAAII,OAAS,WACX,EAAKC,cAAcL,M,mFAtBvB9B,KAAKoC,a,mIAIkBC,IAAmB,6E,OAApCC,E,OACNtC,KAAKM,SAAS,CAACa,MAAOmB,IACtBf,QAAQC,IAAI,a,qFAqBMM,G,uFAChBP,QAAQC,IAAIM,GACRS,EAAYF,IAAWG,WAAWV,GAAKW,eAAe,CAAC,GAAG,KAC9DF,EAAYF,IAAWE,EAAW,CAAC,EAAE,GAAG,GAAG,I,mBACrBvC,KAAKR,MAAM2B,MAAMuB,QAAQH,I,OAAzCI,E,OACAC,EAAQD,EAAQE,YAAY,GAClCtB,QAAQC,IAAIoB,GACRE,EAAM,CAAC,YAAa,aAAc,UAAW,WAAY,aACrDC,EAAI,E,aAAGA,EAAIH,EAAMlB,Q,oBACR,GAAZkB,EAAMG,G,wBACP/C,KAAKM,SAAS,CAACc,WAAY0B,EAAIC,K,2BAGjCxB,QAAQC,IAAIoB,EAAMG,I,UALeA,E,iGAUnC,OACI,yBAAKjD,MAAO1B,EAAOC,WACjB,2BAAO2E,QAAQ,SAASC,GAAG,YAAYnD,MAAK,eACvC1B,EAAOuC,MADgC,CAE1CC,gBAAiB,QAAWZ,KAAKR,MAAM0B,SAAW,SAGpD,2BACEpB,MAAO,CAACxB,QAAS,QACjB4E,KAAK,OACLC,OAAO,UACPC,QAAQ,SACRC,SAAUrD,KAAKqB,aACf4B,GAAG,WAEL,yBAAKnD,MAAO,CAAEW,MAAO,UAAYT,KAAKR,MAAM4B,iB,GArErCb,IAAMC,W,QCnCrB8C,EAAU,CACdC,QAAS,UACTC,OAAQ,CACND,QAAS,CAAEE,GAAI,CAAEC,KAAM,iBACvBC,aAAc,CAAEF,GAAI,CAAEC,KAAM,eAC5BE,WAAY,CAAEH,GAAI,CAAEC,KAAM,eAC1BG,WAAY,CAAEJ,GAAI,CAAEC,KAAM,eAAiBI,WAAW,GACtDC,YAAa,CAAEN,GAAI,CAAEC,KAAM,aAC3BM,SAAU,CAAEP,GAAI,CAAEC,KAAM,cAAgBI,WAAW,EAAMG,aAAa,KA0G3DC,MAtGf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,gCAEmBA,mBAAS,OAF5B,gCAGaA,mBAAS,OAHtB,gCAIIC,mBACAA,mBAKYC,sBAHb,SAAC7E,EAAO8B,GAAR,OACdgC,EAAQE,OAAOhE,GAAOiE,GAAGnC,IAAUgC,EAAQC,UAEID,EAAQC,UAV5C,mBAUNe,EAVM,aAwDsBhB,EAAQE,OAAOc,IA0BlD,OAlFa,EAwDLR,UAxDK,EAwDMG,YA2BjB,kBAAC,IAAD,CAAQM,SAAUC,eACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,mDAEF,kBAAC,IAAD,KACE,oDC3GQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c8dc073f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    Link,\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nlet styles = {\r\n    container: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        padding: \"0\",\r\n    },\r\n    middle: {\r\n        width: \"100%\",\r\n        height: \"20%\",\r\n        padding: \"0\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    },\r\n    mainCircle: {\r\n        position: \"absolute\",\r\n        height: \"150px\",\r\n        width: \"150px\", \r\n        borderRadius: \"100px 100px 100px 100px\", \r\n        backgroundColor: \"black\", \r\n    },\r\n    centerLine: {\r\n        position: \"absolute\",\r\n        height: \"5px\",\r\n        width: \"100%\", \r\n        padding: \"0\",\r\n        backgroundColor: \"black\",\r\n        zIndex: \"10\",\r\n    },\r\n    topSemiCircle: {\r\n        position: \"absolute\",\r\n        transform: \"translate(0, -44px)\", \r\n        height: \"30px\",\r\n        width: \"120px\", \r\n        borderRadius: \"100px 100px 0 0\", \r\n        backgroundColor: \"white\", \r\n        cursor: \"pointer\",\r\n    },\r\n    bottomSemiCircle: {\r\n        position: \"absolute\",\r\n        transform: \"translate(0, 44px)\", \r\n        height: \"30px\",\r\n        width: \"120px\", \r\n        borderRadius: \"0 0 100px 100px\", \r\n        backgroundColor: \"white\", \r\n        cursor: \"pointer\",\r\n    },\r\n    blackbar: {\r\n        position: \"absolute\",\r\n        backgroundColor: \"black\",\r\n        height: \"15%\",\r\n        width: \"100%\",\r\n        padding: \"0\",\r\n    }, \r\n\r\n}\r\n\r\n\r\nclass Main extends React.Component {\r\n\r\n    state = {\r\n        navigateToUpload: false,\r\n        navigateToDraw: false,\r\n    }\r\n\r\n    setHovered = (e) => {\r\n        e.target.style.backgroundColor = 'gray'\r\n    }\r\n\r\n    setUnhovered = (e) => {\r\n        e.target.style.backgroundColor = 'white'\r\n    }\r\n\r\n    \r\n\r\n    \r\n    render() {\r\n\r\n        if (this.state.navigateToUpload) {\r\n            return <Redirect to=\"/upload\" push={true}/>\r\n        }\r\n\r\n        if (this.state.navigateToDraw) {\r\n            return <Redirect to=\"/draw\" push={true}/>\r\n        }\r\n\r\n        return (\r\n            <div style={styles.container}>\r\n                <div style={styles.middle}>\r\n                    <div style={styles.blackbar}></div>\r\n                    <div style={styles.mainCircle}></div>\r\n                    <div style={styles.centerLine}></div>\r\n                    <div style={styles.topSemiCircle}\r\n                         onMouseEnter={this.setHovered} \r\n                         onMouseLeave={this.setUnhovered}\r\n                         onClick={() => this.setState({ navigateToUpload: true })}>\r\n                        Upload Image\r\n                    </div>\r\n                    <div style={styles.bottomSemiCircle} \r\n                        onMouseEnter={this.setHovered} \r\n                        onMouseLeave={this.setUnhovered}\r\n                        onClick={() => this.setState({ navigateToDraw: true })}>\r\n                        Free Draw\r\n                    </div>\r\n                </div>\r\n            </div>        \r\n        )\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default Main\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    Link,\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\n\r\n\r\nlet styles = {\r\n  container: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      padding: \"0\",\r\n      backgroundColor: \"white\",\r\n      color: \"white\",\r\n  },\r\n  uploader: {\r\n    backgroundColor: \"red\",\r\n  },\r\n  label: {\r\n    backgroundImage: \"url(\\\"https://www.pngitem.com/pimgs/m/95-958057_whos-that-pokemon-hd-png-download.png\\\")\",\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    position: \"absolute\",\r\n    left: \"10%\",\r\n    top: \"200px\",\r\n    height: \"280px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  label: {\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    position: \"absolute\",\r\n    left: \"10%\",\r\n    top: \"200px\",\r\n    height: \"280px\",\r\n    cursor: \"pointer\",\r\n  }\r\n}\r\n\r\n\r\n\r\nclass Upload extends React.Component {\r\n\r\n    state = {\r\n      imageUrl: 'https://www.pngitem.com/pimgs/m/95-958057_whos-that-pokemon-hd-png-download.png',\r\n      model: null,\r\n      prediction: 'NO PREDICTION'\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.getModel();\r\n    }\r\n    \r\n    async getModel() {\r\n      const newModel = await tf.loadLayersModel('https://cors-anywhere.herokuapp.com/http://68.151.168.50:8000/model.json')\r\n      this.setState({model: newModel})\r\n      console.log('got model')\r\n    }\r\n\r\n    handleUpload = (event) => {\r\n      console.log('handling upload!')\r\n      const { files } = event.target;\r\n      var newImage = event.target.files[0]\r\n      if (files.length > 0) {\r\n        const url = URL.createObjectURL(event.target.files[0]);\r\n        this.setState({imageUrl: url})\r\n        console.log(this.state)\r\n\r\n        var img = new Image();\r\n        img.crossOrigin = \"Anonymous\";\r\n        img.src = url;\r\n        img.onload = () => {\r\n          this.getPrediction(img)\r\n        }\r\n      }\r\n    };\r\n    \r\n    async getPrediction(img) {\r\n        console.log(img)\r\n        var testImage = tf.browser.fromPixels(img).resizeBilinear([96,96])\r\n        testImage = tf.reshape(testImage, [1,96,96,3])\r\n        const results = await this.state.model.predict(testImage);\r\n        const value = results.arraySync()[0];\r\n        console.log(value)\r\n        var map = ['Bulbasaur', 'Charmander', 'Pikachu', 'Squirtle', 'Vileplume']\r\n        for(var i = 0; i < value.length; ++i) {\r\n          if(value[i] == 1) {\r\n            this.setState({prediction: map[i]})\r\n            return;\r\n          }\r\n          console.log(value[i])\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div style={styles.container}>\r\n              <label htmlFor=\"upload\" id=\"pokelabel\" style={{\r\n                ...styles.label,\r\n                backgroundImage: \"url(\\\"\" + this.state.imageUrl + \"\\\")\"\r\n              }}>\r\n              </label>\r\n              <input\r\n                style={{display: \"none\"}}\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                capture=\"camera\"\r\n                onChange={this.handleUpload}\r\n                id=\"upload\"\r\n              />\r\n              <div style={{ color: \"black\" }}>{this.state.prediction}</div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default Upload\r\n","import React, { useState, useRef, useReducer } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport \"./App.css\";\r\nimport Main from \"./mainComponent\"\r\nimport Upload from \"./upload\"\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nconst machine = {\r\n  initial: \"initial\",\r\n  states: {\r\n    initial: { on: { next: \"loadingModel\" } },\r\n    loadingModel: { on: { next: \"modelReady\" } },\r\n    modelReady: { on: { next: \"imageReady\" } },\r\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\r\n    identifying: { on: { next: \"complete\" } },\r\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState([]);\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const [model, setModel] = useState(null);\r\n  const imageRef = useRef();\r\n  const inputRef = useRef();\r\n\r\n  const reducer = (state, event) =>\r\n    machine.states[state].on[event] || machine.initial;\r\n\r\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\r\n  const next = () => dispatch(\"next\");\r\n\r\n  const loadModel = async () => {\r\n    next();\r\n    const model = await tf.loadLayersModel('http://localhost:8000/model.json')\r\n    setModel(model);\r\n    next();\r\n  };\r\n\r\n  const identify = async () => {\r\n    next();\r\n    var testImage = tf.browser.fromPixels(imageRef.current).resizeBilinear([96,96])\r\n    testImage = tf.reshape(testImage, [1,96,96,3])\r\n    const results = await model.predict(testImage);\r\n    const value = results.arraySync();\r\n    console.log(value)\r\n    // setResults(results);\r\n    // next();\r\n  };\r\n\r\n  const reset = async () => {\r\n    setResults([]);\r\n    next();\r\n  };\r\n\r\n  const upload = () => inputRef.current.click();\r\n\r\n  const handleUpload = event => {\r\n    const { files } = event.target;\r\n    if (files.length > 0) {\r\n      const url = URL.createObjectURL(event.target.files[0]);\r\n      setImageURL(url);\r\n      next();\r\n    }\r\n  };\r\n\r\n  const actionButton = {\r\n    initial: { action: loadModel, text: \"Load Model\" },\r\n    loadingModel: { text: \"Loading Model...\" },\r\n    modelReady: { action: upload, text: \"Upload Image\" },\r\n    imageReady: { action: identify, text: \"Identify Breed\" },\r\n    identifying: { text: \"Identifying...\" },\r\n    complete: { action: reset, text: \"Reset\" }\r\n  };\r\n\r\n  const { showImage, showResults } = machine.states[appState];\r\n\r\n\r\n  // <div>\r\n  //     {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\r\n  //     <input\r\n  //       type=\"file\"\r\n  //       accept=\"image/*\"\r\n  //       capture=\"camera\"\r\n  //       onChange={handleUpload}\r\n  //       ref={inputRef}\r\n  //     />\r\n  //     {showResults && (\r\n  //       <ul>\r\n  //         {results.map(({ className, probability }) => (\r\n  //           <li key={className}>{`${className}: %${(probability * 100).toFixed(\r\n  //             2\r\n  //           )}`}</li>\r\n  //         ))}\r\n  //       </ul>\r\n  //     )}\r\n  //     <button onClick={actionButton[appState].action || (() => {})}>\r\n  //       {actionButton[appState].text}\r\n  //     </button>\r\n  //   </div>\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Main />\r\n          </Route>\r\n          <Route path=\"/upload\">\r\n            <Upload/>\r\n          </Route>\r\n          <Route path=\"/draw\">\r\n            <div>DRAW SCREEN!!!!!!</div>\r\n          </Route>\r\n          <Route>\r\n            <div>ERROR NOT FOUND</div>\r\n          </Route>\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}